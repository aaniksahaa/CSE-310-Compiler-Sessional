Line# 1: Token <SINGLE LINE COMMENT> Lexeme // testing found
Line# 2: Token <MULTI LINE COMMENT> Lexeme /* testing
c
code*/ found
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme forwhiletest found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 9: Token <FOR> Lexeme for found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 9: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 9: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 10: Token <LCURL> Lexeme { found
Line# 11: Token <WHILE> Lexeme while found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 11: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 11: Token <LCURL> Lexeme { found
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL  
	ScopeTable# 4
	ScopeTable# 3
	ScopeTable# 2
	10--> <a,INT> 
	ScopeTable# 1
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statement  
Line# 12: Token <LCURL> Lexeme { found
Line# 13: Token <LCURL> Lexeme { found
Line# 14: Token <WHILE> Lexeme while found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statement : WHILE LPAREN expression RPAREN statement 
statements : statement  
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 6
	ScopeTable# 5
	ScopeTable# 3
	ScopeTable# 2
	10--> <a,INT> 
	ScopeTable# 1
statement : compound_statement 
statements : statement  
Line# 16: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 5
	ScopeTable# 3
	ScopeTable# 2
	10--> <a,INT> 
	ScopeTable# 1
statement : compound_statement 
statements : statements statement  
Line# 17: Token <FOR> Lexeme for found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 17: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement  
Line# 18: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3
	ScopeTable# 2
	10--> <a,INT> 
	ScopeTable# 1
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement  
Line# 19: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	10--> <a,INT> 
	ScopeTable# 1
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : unit 
Line# 21: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 21: Token <ID> Lexeme iftest found
Line# 21: Token <LPAREN> Lexeme ( found
Line# 21: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 21: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 21: Token <RPAREN> Lexeme ) found
Line# 22: Token <LCURL> Lexeme { found
Line# 23: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 23: Token <ID> Lexeme b found
Line# 23: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 24: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 24: Token <ID> Lexeme c found
Line# 24: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 25: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 25: Token <ID> Lexeme d found
Line# 25: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 26: Token <IF> Lexeme if found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme b found
Line# 26: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 26: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 26: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 27: Token <LCURL> Lexeme { found
Line# 28: Token <ID> Lexeme c found
Line# 28: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 29: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 8
	ScopeTable# 7
	1--> <c,INT> 
	2--> <d,FLOAT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
statement : compound_statement 
Line# 30: Token <IF> Lexeme if found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement  
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <ID> Lexeme c found
Line# 30: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 30: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 30: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 31: Token <LCURL> Lexeme { found
Line# 32: Token <ID> Lexeme d found
Line# 32: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 33: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 9
	ScopeTable# 7
	1--> <c,INT> 
	2--> <d,FLOAT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
statement : compound_statement 
Line# 34: Token <ELSE> Lexeme else found
Line# 35: Token <LCURL> Lexeme { found
Line# 36: Token <ID> Lexeme d found
Line# 36: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 37: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 10
	ScopeTable# 7
	1--> <c,INT> 
	2--> <d,FLOAT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
statement : compound_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statements statement  
Line# 38: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 7
	1--> <c,INT> 
	2--> <d,FLOAT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 40: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 40: Token <ID> Lexeme f1 found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 40: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 40: Token <COMMA> Lexeme , found
Line# 40: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 40: Token <ID> Lexeme a found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 40: Token <COMMA> Lexeme , found
Line# 40: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 40: Token <ID> Lexeme a found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 40: Token <COMMA> Lexeme , found
Line# 40: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 40: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 40: Token <COMMA> Lexeme , found
Line# 40: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 40: Token <ID> Lexeme c found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 40: Token <RPAREN> Lexeme ) found
Line# 41: Token <LCURL> Lexeme { found
Line# 42: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 42: Token <ID> Lexeme y found
Line# 42: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 43: Token <ID> Lexeme y found
Line# 43: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 43: Token <ID> Lexeme b found
Line# 43: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 43: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 44: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 44: Token <ID> Lexeme c found
Line# 44: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 45: Token <IF> Lexeme if found
Line# 45: Token <LPAREN> Lexeme ( found
Line# 45: Token <ID> Lexeme c found
Line# 45: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 45: Token <ID> Lexeme a found
Line# 45: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 46: Token <LCURL> Lexeme { found
Line# 47: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 47: Token <ID> Lexeme dd found
Line# 47: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 48: Token <IF> Lexeme if found
Line# 48: Token <LPAREN> Lexeme ( found
Line# 48: Token <ID> Lexeme a found
Line# 48: Token <RELOP> Lexeme >= found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 48: Token <ID> Lexeme c found
Line# 48: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 49: Token <LCURL> Lexeme { found
Line# 50: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 50: Token <ID> Lexeme ee found
Line# 50: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 51: Token <WHILE> Lexeme while found
Line# 51: Token <LPAREN> Lexeme ( found
Line# 51: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 51: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 52: Token <LCURL> Lexeme { found
Line# 53: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 53: Token <ID> Lexeme ff found
Line# 53: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 54: Token <RETURN> Lexeme return found
Line# 54: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 54: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 55: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 14
	11--> <ff,INT> 
	ScopeTable# 13
	4--> <ee,INT> 
	ScopeTable# 12
	8--> <dd,INT> 
	ScopeTable# 11
	1--> <c,INT> <y,INT> 
	10--> <a,INT> 
	11--> <b,VOID> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement  
Line# 56: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 13
	4--> <ee,INT> 
	ScopeTable# 12
	8--> <dd,INT> 
	ScopeTable# 11
	1--> <c,INT> <y,INT> 
	10--> <a,INT> 
	11--> <b,VOID> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
statement : compound_statement 
Line# 57: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement  
compound_statement : LCURL statements RCURL  
	ScopeTable# 12
	8--> <dd,INT> 
	ScopeTable# 11
	1--> <c,INT> <y,INT> 
	10--> <a,INT> 
	11--> <b,VOID> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
statement : compound_statement 
Line# 58: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statements statement  
compound_statement : LCURL statements RCURL  
	ScopeTable# 11
	1--> <c,INT> <y,INT> 
	10--> <a,INT> 
	11--> <b,VOID> 
	ScopeTable# 1
	3--> <forwhiletest,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 60: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 60: Token <ID> Lexeme g found
Line# 60: Token <LPAREN> Lexeme ( found
Line# 60: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 60: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 60: Token <COMMA> Lexeme , found
Line# 60: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 60: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 60: Token <RPAREN> Lexeme ) found
Line# 61: Token <LCURL> Lexeme { found
Line# 62: Token <RETURN> Lexeme return found
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme a found
Line# 62: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 62: Token <MULOP> Lexeme % found
Line# 62: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 62: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme a found
Line# 62: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 62: Token <MULOP> Lexeme * found
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme a found
Line# 62: Token <MULOP> Lexeme / found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 62: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme a found
Line# 62: Token <RELOP> Lexeme >= found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 62: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term  
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme a found
Line# 62: Token <LOGICOP> Lexeme && found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 62: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statement  
Line# 63: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 15
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 65: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 65: Token <ID> Lexeme h found
Line# 65: Token <LPAREN> Lexeme ( found
Line# 65: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 65: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 65: Token <RPAREN> Lexeme ) found
Line# 66: Token <LCURL> Lexeme { found
Line# 68: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL  
	ScopeTable# 16
	10--> <a,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 70: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 70: Token <ID> Lexeme g found
Line# 70: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : program unit 
Line# 72: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 72: Token <ID> Lexeme g found
Line# 72: Token <LPAREN> Lexeme ( found
Line# 72: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 72: Token <ID> Lexeme c found
parameter_list  : type_specifier ID
Line# 72: Token <COMMA> Lexeme , found
Line# 72: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 72: Token <ID> Lexeme d found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 72: Token <RPAREN> Lexeme ) found
Line# 72: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 73: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 73: Token <ID> Lexeme h found
Line# 73: Token <LPAREN> Lexeme ( found
Line# 73: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 73: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 73: Token <RPAREN> Lexeme ) found
Line# 74: Token <LCURL> Lexeme { found
Line# 76: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL  
	ScopeTable# 17
	10--> <a,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 77: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 77: Token <ID> Lexeme h found
Line# 77: Token <LPAREN> Lexeme ( found
Line# 77: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 77: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 77: Token <RPAREN> Lexeme ) found
Line# 78: Token <LCURL> Lexeme { found
Line# 80: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL  
	ScopeTable# 18
	10--> <a,FLOAT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 81: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 81: Token <ID> Lexeme h found
Line# 81: Token <LPAREN> Lexeme ( found
Line# 81: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 81: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 81: Token <COMMA> Lexeme , found
Line# 81: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 81: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 81: Token <RPAREN> Lexeme ) found
Line# 82: Token <LCURL> Lexeme { found
Line# 83: Token <LCURL> Lexeme { found
Line# 84: Token <LCURL> Lexeme { found
Line# 85: Token <LCURL> Lexeme { found
Line# 86: Token <LCURL> Lexeme { found
Line# 87: Token <IF> Lexeme if found
Line# 87: Token <LPAREN> Lexeme ( found
Line# 87: Token <ID> Lexeme a found
Line# 87: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 87: Token <RELOP> Lexeme == found
simple_expression : term 
Line# 87: Token <ID> Lexeme b found
Line# 87: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 87: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 88: Token <LCURL> Lexeme { found
Line# 89: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 89: Token <ID> Lexeme c found
Line# 89: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 90: Token <WHILE> Lexeme while found
Line# 90: Token <LPAREN> Lexeme ( found
Line# 90: Token <ID> Lexeme c found
Line# 90: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 90: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 91: Token <LCURL> Lexeme { found
Line# 92: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 92: Token <ID> Lexeme i found
Line# 92: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 92: Token <ID> Lexeme j found
Line# 92: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 92: Token <ID> Lexeme k found
Line# 92: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 92: Token <ID> Lexeme n found
Line# 92: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 93: Token <FOR> Lexeme for found
Line# 93: Token <LPAREN> Lexeme ( found
Line# 93: Token <ID> Lexeme i found
Line# 93: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 93: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 93: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 93: Token <ID> Lexeme i found
Line# 93: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 93: Token <ID> Lexeme n found
Line# 93: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 93: Token <ID> Lexeme k found
Line# 93: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 93: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 94: Token <LCURL> Lexeme { found
Line# 95: Token <LCURL> Lexeme { found
Line# 96: Token <FOR> Lexeme for found
Line# 96: Token <LPAREN> Lexeme ( found
Line# 96: Token <ID> Lexeme j found
Line# 96: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 96: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 96: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 96: Token <ID> Lexeme j found
Line# 96: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 96: Token <ID> Lexeme n found
Line# 96: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 96: Token <ID> Lexeme j found
Line# 96: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 96: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 97: Token <LCURL> Lexeme { found
Line# 98: Token <WHILE> Lexeme while found
Line# 98: Token <LPAREN> Lexeme ( found
Line# 98: Token <ID> Lexeme k found
Line# 98: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 98: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 99: Token <LCURL> Lexeme { found
Line# 101: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL  
	ScopeTable# 29
	ScopeTable# 28
	ScopeTable# 27
	ScopeTable# 26
	ScopeTable# 25
	1--> <n,INT> 
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statement  
Line# 102: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 28
	ScopeTable# 27
	ScopeTable# 26
	ScopeTable# 25
	1--> <n,INT> 
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statement  
Line# 103: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 27
	ScopeTable# 26
	ScopeTable# 25
	1--> <n,INT> 
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statements : statement  
Line# 104: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 26
	ScopeTable# 25
	1--> <n,INT> 
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement  
Line# 105: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 25
	1--> <n,INT> 
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement 
statements : statements statement  
Line# 106: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 24
	1--> <c,FLOAT> 
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
Line# 107: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement 
statements : statement  
compound_statement : LCURL statements RCURL  
	ScopeTable# 23
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statements : statement  
Line# 108: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 22
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statements : statement  
Line# 109: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 21
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statements : statement  
Line# 110: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 20
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statements : statement  
Line# 111: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 19
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 113: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 113: Token <ID> Lexeme main found
Line# 113: Token <LPAREN> Lexeme ( found
Line# 113: Token <RPAREN> Lexeme ) found
Line# 114: Token <LCURL> Lexeme { found
Line# 115: Token <FOR> Lexeme for found
Line# 115: Token <LPAREN> Lexeme ( found
Line# 115: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 115: Token <SEMICOLON> Lexeme ; found
expression_statement : SEMICOLON 
Line# 115: Token <ID> Lexeme a found
Line# 115: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 115: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 116: Token <LCURL> Lexeme { found
Line# 117: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 117: Token <ID> Lexeme g found
Line# 117: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 118: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 31
	5--> <g,INT> 
	ScopeTable# 30
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statement  
Line# 119: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 119: Token <ID> Lexeme a found
Line# 119: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 120: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 120: Token <ID> Lexeme b found
Line# 120: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 121: Token <FOR> Lexeme for found
Line# 121: Token <LPAREN> Lexeme ( found
Line# 121: Token <ID> Lexeme a found
Line# 121: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 121: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 121: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 121: Token <ID> Lexeme a found
Line# 121: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 121: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 121: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 121: Token <ID> Lexeme a found
Line# 121: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 121: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 122: Token <LCURL> Lexeme { found
Line# 123: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 123: Token <ID> Lexeme a found
Line# 123: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 124: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 124: Token <ID> Lexeme b found
Line# 124: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 125: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 32
	10--> <a,INT> 
	11--> <b,FLOAT> 
	ScopeTable# 30
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement  
Line# 126: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 126: Token <ID> Lexeme arr found
Line# 126: Token <LSQUARE> Lexeme [ found
Line# 126: Token <CONST_INT> Lexeme 5 found
Line# 126: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 126: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 127: Token <ID> Lexeme a found
Line# 127: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 127: Token <ID> Lexeme arr found
Line# 127: Token <LSQUARE> Lexeme [ found
Line# 127: Token <CONST_FLOAT> Lexeme 2.5 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 127: Token <MULOP> Lexeme / found
Line# 127: Token <CONST_FLOAT> Lexeme 3.5 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 127: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 127: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 128: Token <ID> Lexeme b found
Line# 128: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 128: Token <ID> Lexeme f1 found
Line# 128: Token <LPAREN> Lexeme ( found
Line# 128: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 128: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 128: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 128: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 128: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 128: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 128: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 129: Token <ID> Lexeme b found
Line# 129: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 129: Token <ID> Lexeme f1 found
Line# 129: Token <LPAREN> Lexeme ( found
Line# 129: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 129: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 129: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 130: Token <ID> Lexeme b found
Line# 130: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 130: Token <ID> Lexeme f1 found
Line# 130: Token <LPAREN> Lexeme ( found
Line# 130: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 130: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 130: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 130: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 130: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 130: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 131: Token <ID> Lexeme b found
Line# 131: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 131: Token <ID> Lexeme f1 found
Line# 131: Token <LPAREN> Lexeme ( found
Line# 131: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 131: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 131: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 131: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 131: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 131: Token <CONST_INT> Lexeme 6 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 131: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 133: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 133: Token <ID> Lexeme u found
Line# 133: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 133: Token <ID> Lexeme v found
Line# 133: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 133: Token <ID> Lexeme p found
Line# 133: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 133: Token <ID> Lexeme q found
Line# 133: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 135: Token <ID> Lexeme u found
Line# 135: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 135: Token <ID> Lexeme tt found
Line# 135: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 135: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 136: Token <ID> Lexeme u found
Line# 136: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 136: Token <ID> Lexeme tt found
Line# 136: Token <LPAREN> Lexeme ( found
Line# 136: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 136: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 136: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 137: Token <ID> Lexeme g found
Line# 137: Token <LPAREN> Lexeme ( found
Line# 137: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 137: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 137: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 137: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 137: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 138: Token <ID> Lexeme h found
Line# 138: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 138: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 139: Token <ID> Lexeme h found
Line# 139: Token <LSQUARE> Lexeme [ found
Line# 139: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 139: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 139: Token <INCOP> Lexeme ++ found
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 139: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 140: Token <ID> Lexeme u found
Line# 140: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 140: Token <ID> Lexeme v found
Line# 140: Token <LSQUARE> Lexeme [ found
Line# 140: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 140: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 140: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 141: Token <ID> Lexeme u found
Line# 141: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 141: Token <ID> Lexeme vv found
Line# 141: Token <LSQUARE> Lexeme [ found
Line# 141: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 141: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 141: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 144: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 144: Token <ID> Lexeme arr1 found
Line# 144: Token <LSQUARE> Lexeme [ found
Line# 144: Token <CONST_INT> Lexeme 5 found
Line# 144: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 144: Token <COMMA> Lexeme , found
Line# 144: Token <ID> Lexeme arr2 found
Line# 144: Token <LSQUARE> Lexeme [ found
Line# 144: Token <CONST_INT> Lexeme 10 found
Line# 144: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 144: Token <COMMA> Lexeme , found
Line# 144: Token <ID> Lexeme arr3 found
Line# 144: Token <LSQUARE> Lexeme [ found
Line# 144: Token <CONST_INT> Lexeme 15 found
Line# 144: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 144: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statements statement  
Line# 146: Token <ID> Lexeme arr1 found
Line# 146: Token <LSQUARE> Lexeme [ found
Line# 146: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 146: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 146: Token <INCOP> Lexeme ++ found
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 146: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 147: Token <ID> Lexeme arr2 found
Line# 147: Token <DECOP> Lexeme -- found
variable : ID 	 
factor : variable DECOP 
unary_expression : factor 
term :	unary_expression 
Line# 147: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 149: Token <ID> Lexeme arr2 found
Line# 149: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 149: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 151: Token <NOT> Lexeme ! found
Line# 151: Token <ID> Lexeme arr found
Line# 151: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
unary_expression : NOT unary_expression 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 156: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 30
	1--> <arr,ARRAY> 
	3--> <p,INT> 
	4--> <q,INT> 
	6--> <arr1,ARRAY> 
	7--> <arr2,ARRAY> 
	8--> <u,INT> <arr3,ARRAY> 
	9--> <v,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,INT> 
	3--> <forwhiletest,FUNCTION,INT> 
	5--> <g,FUNCTION,INT> 
	6--> <iftest,FUNCTION,INT> <h,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 
Total Lines: 158
Total Errors: 25
